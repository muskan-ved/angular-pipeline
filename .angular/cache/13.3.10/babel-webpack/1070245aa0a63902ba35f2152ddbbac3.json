{"ast":null,"code":"import { HttpHeaders, HttpRequest } from '@angular/common/http';\nimport { map } from \"rxjs/operators\";\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { baseUrl } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n    }\n\n    sendRequest(method, endPoint, data) {\n      return this.actualSendRequest(method, endPoint, data);\n    }\n\n    actualSendRequest(method, endPoint, data) {\n      let myHeaders;\n      var token = localStorage.getItem('token') || '{}';\n\n      if (localStorage.getItem('token') != null) {\n        var token = localStorage.getItem('token') || '{}';\n        myHeaders = new HttpHeaders({\n          'authorization': token,\n          'accept': 'application/json'\n        });\n      }\n\n      let endPointUrl;\n      endPointUrl = `${baseUrl}` + endPoint + ``;\n\n      if (method == 'post') {\n        return this.http.post(endPointUrl, data, {\n          headers: myHeaders\n        }).pipe(map(data => {\n          return data;\n        }), catchError(error => {\n          return this.handleError(error);\n        }));\n      } else if (method == 'put') {\n        return this.http.put(endPointUrl, data, {\n          headers: myHeaders\n        }).pipe(map(data => {\n          return data;\n        }), catchError(error => {\n          return this.handleError(error);\n        }));\n      } else if (method == 'delete') {\n        return this.http.delete(endPointUrl, {\n          headers: myHeaders\n        }).pipe(map(data => {\n          return data;\n        }), catchError(error => {\n          return this.handleError(error);\n        }));\n      } else {\n        return this.http.get(endPointUrl, {\n          headers: myHeaders\n        }).pipe(map(data => {\n          return data;\n        }), catchError(error => {\n          return this.handleError(error);\n        }));\n      }\n    }\n\n    handleError(error) {\n      this.error = error;\n      let errorMessage = '';\n\n      if (error.status == 0) {\n        errorMessage = 'An error occurred:the request failed for some reason';\n      } else if (error.status == 401) {\n        errorMessage = 'An error occurred :- Unauthorized error please login first';\n      } else if (error.status == 400) {\n        errorMessage = 'An error occurred:-Bad Request Error occurs';\n      } else if (error.status == 500) {\n        errorMessage = \" An error occurred:-Something went wrong. Please try again after some time\";\n      } else {\n        // The backend returned an unsuccessful response code.\n        // The response body may contain clues as to what went wrong.\n        console.error(`Backend returned code ${error.status}, body was: `, error.error);\n        errorMessage = ` ${error.status},`, error.error;\n      } // Return an observable with a user-facing error message.\n\n\n      return throwError(errorMessage);\n    }\n\n    IsLoggedIn() {\n      //it returns a boolean value, if the token exsist then true else vice versa\n      return !!localStorage.getItem('token');\n    }\n\n    upload(file, customerId, projectId) {\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('customerId', customerId);\n      formData.append('projectId', projectId);\n      let myHeaders;\n      var token = localStorage.getItem('token') || '{}';\n\n      if (localStorage.getItem('token') != null) {\n        var token = localStorage.getItem('token') || '{}';\n        myHeaders = new HttpHeaders({\n          'authorization': token,\n          'accept': 'application/json'\n        });\n      }\n\n      const req = new HttpRequest('POST', `${baseUrl}/admin/upload-doc`, formData, {\n        reportProgress: true,\n        responseType: 'json',\n        headers: myHeaders\n      });\n      return this.http.request(req);\n    }\n\n    getFiles() {\n      return this.http.get(`${baseUrl}/files`);\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}